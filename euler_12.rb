#!/usr/bin/ruby

######
# Euler Problem 12
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
#Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors.

require 'prime'

def calcTriangle(n)
    triangle = 0
    1.upto(n) { |x|
    triangle += x
    }
    return triangle
end

def getPrimeDivisorExponents( n )
    primeDivisorsExp = Array.new
    primeFactors = n.prime_division
    primeFactors.each {|x|
        if x[0].prime? then
            primeDivisorsExp.push( x[1] )
        end
    }
    return primeDivisorsExp
end

def countDivisors( n )
    primeDivisorExponents = getPrimeDivisorExponents( n )
    numOfDivisors = 1
    primeDivisorExponents.each {|x| numOfDivisors *= (x+1) }
    return numOfDivisors
end


#puts countDivisors(12)

# algorithm: while not done, calculate the triangle number, get the prime factors of that number, take the prime divisor exponents and add 1 then multiply them together to get the number of divisors
done = false
currentNum = 1
while( true )
    triangleNumber = calcTriangle( currentNum )
    if ( countDivisors( triangleNumber ) > 500 ) then
        puts triangleNumber
        done = true
    end
    if done == true then
        break
    end
    currentNum += 1
end
